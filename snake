import pygame as pg
import sys
from pygame.math import Vector2
import random

pg.init()
cell_size = 20
cell_number = 35
screen = pg.display.set_mode((cell_size * cell_number, cell_size * cell_number))
clock = pg.time.Clock()
head = pg.image.load('head_snake.png').convert_alpha()
pineapple = pg.image.load('pineapple.png').convert_alpha()


class FRUIT:
    def __init__(self):
        self.x = random.randint(0, cell_number - 1)
        self.y = random.randint(0, cell_number - 1)
        self.pos = Vector2(self.x, self.y)

    def draw_fruit(self):
        global pineapple
        #fruit_rect = pg.Rect(int(self.pos.x * cell_size), int(self.pos.y * cell_size), cell_size, cell_size)
        pineapple = pg.transform.scale(pineapple, (cell_size, cell_size))
        screen.blit(pineapple, (int(self.x * cell_size), int(self.y * cell_size)))
        #pg.draw.rect(screen, (100, 150, 0), fruit_rect) # usual fruit - grd

    def random_fruit(self):
        self.x = random.randint(0, cell_number - 1)
        self.y = random.randint(0, cell_number - 1)
        self.pos = Vector2(self.x, self.y)


class SNAKE:
    def __init__(self):
        self.body = [Vector2(10, 7), Vector2(10, 6), Vector2(10, 5)]
        self.direction = Vector2(0, 1)
        self.new_block = False

    def draw_snake(self):
        for i in self.body:
            x_pos = int(i.x * cell_size)
            y_pos = int(i.y * cell_size)
            head_block = pg.transform.scale(head, (cell_size, cell_size))
            block_rect = pg.Rect(int(x_pos), int(y_pos), cell_size, cell_size)
            screen.blit(head_block, block_rect)

    def move_snake(self):
        if self.new_block:
            copy_body = self.body[:]
            copy_body.insert(0, copy_body[0] + self.direction)
            self.body = copy_body[:]
            self.new_block = False
        else:
            copy_body = self. body[:-1]
            copy_body.insert(0, copy_body[0] + self.direction)
            self.body = copy_body[:]

    def add_block(self):
        self.new_block = True


class MAIN:
    def update(self):
        snake.move_snake()
        self.check_touch()
        self.check_fail()

    def check_touch(self):
        if fruit.pos == snake.body[0]:
            fruit.random_fruit()
            snake.add_block()

    def check_fail(self):
        if not 0 <= snake.body[0].x <= cell_number or not 0 <= snake.body[0].y < cell_number:
            self.game_over()
        for i in snake.body[3:]:
            if i == snake.body[0]:
                self.game_over()

    def game_over(self):
        sys.exit()

    def draw_score(self):
        score_text = str(len(snake.body) - 3)
        score_surface = game_font.render(score_text, True, pg.Color('orange'))
        score_x = int(cell_size * cell_number - 60)
        score_y = int(cell_size * cell_number - 40)
        score_rect = score_surface.get_rect(center=(score_x, score_y))
        pineapple_rect = pineapple.get_rect(midright=(score_rect.left, score_rect.centery))
        screen.blit(score_surface, score_rect)
        screen.blit(pineapple, pineapple_rect)
        screen.blit(score_surface, score_rect)


game_font = pg.font.Font('Homework.otf', 25)
fruit = FRUIT()
snake = SNAKE()
SCREEN_UPDATE = pg.USEREVENT
pg.time.set_timer(SCREEN_UPDATE, 150)
main_game = MAIN()
keys = pg.key.get_pressed()


while True:
    for event in pg.event.get():
        if event.type == pg.QUIT:
            sys.exit()
        if event.type == SCREEN_UPDATE:
            main_game.update()
        if event.type == pg.KEYDOWN:
            if snake.direction != Vector2(-1, 0) and (event.key == pg.K_RIGHT or event.key == pg.K_d):
                snake.direction = Vector2(1, 0)
                if snake.direction != Vector2(-1, 0) and pg.key.get_pressed()[pg.K_RIGHT]:
                    snake.direction = Vector2(2, 0)
            if snake.direction != Vector2(1, 0) and (event.key == pg.K_LEFT or event.key == pg.K_a):
                snake.direction = Vector2(-1, 0)
                if snake.direction != Vector2(1, 0) and pg.key.get_pressed()[pg.K_LEFT]:
                    snake.direction = Vector2(-2, 0)
            if snake.direction != Vector2(0, 1) and (event.key == pg.K_UP or event.key == pg.K_w):
                snake.direction = Vector2(0, -1)
                if snake.direction != Vector2(0, 1) and pg.key.get_pressed()[pg.K_UP]:
                    snake.direction = Vector2(0, -2)
            if snake.direction != Vector2(0, -1) and (event.key == pg.K_DOWN or event.key == pg.K_s):
                snake.direction = Vector2(0, 1)
                if snake.direction != Vector2(0, -1) and pg.key.get_pressed()[pg.K_DOWN]:
                    snake.direction = Vector2(0, 2)
        screen.fill(pg.Color('brown'))
        fruit.draw_fruit()
        snake.draw_snake()
        main_game.draw_score()
        pg.display.update()
        clock.tick(60)
        
        
it's necessary to add photo of fruits, snake and font 
